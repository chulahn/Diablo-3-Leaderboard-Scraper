<!DOCTYPE html>
<html lang="en">
<head>
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
	<meta charset="UTF-8">
	<title><%- leaderboardType %> <%- title %> Leaderboard page</title>
</head>


<body>
<h1>This is the <%- leaderboardType %> <%- title %> Leaderboard page</h1>
<p id='ten'> 10 values </p>
<p id='twenty'> 20 values </p>
<p id='fifty'> 50 values </p>
<p id='hundred'> 100 values </p>

<script>
var height = 300, width = 500;
var barPadding = 1;
var dpsArray = <%= JSON.stringify(dpsData) %>;
var svg= d3.select("body")
	.append("svg")
	.attr("height", 300)
	.attr("width" , 500);
var allData = <%-JSON.stringify(all)%>;

console.log

var currentArray = allData;

svg.selectAll("rect").data(currentArray).enter().append("rect")
	.attr("x" , function(d,i) {
		return i * (width/currentArray.length); })
	.attr("y" , function(d) { 
		return height-d.stats.damage/10000;})
	.attr("width", width / currentArray.length - barPadding)
	.attr("height", function(d) {
		return d.stats.damage/10000
	})
	.attr("class" , "enter");

svg.selectAll("rect")
   .on("mouseover", function(d) {
   		svg.selectAll("text").data(currentArray).enter().append("text")
	.attr("x" , function(d, i) {
		return i * (width / currentArray.length) + (width / currentArray.length - barPadding) /2;
	})
	.attr("y" , function(d) {
		return (height)-(d.stats.damage/10000);
	})
	.text(function (d) {
		return (d.stats.damage/1000000).toFixed(2)+"m";
	})
	.attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "red")
   .attr("text-anchor", "middle")
   console.log(d3.select(this).datum());

   });


svg.selectAll("rect")
   .on("mouseover", function(d) {
   		svg.selectAll("text").data(currentArray).enter().append("text")
	.attr("x" , function(d, i) {
		return i * (width / currentArray.length) + (width / currentArray.length - barPadding) /2;
	})
	.attr("y" , function(d) {
		return (height)-(d.stats.damage/10000 + 10);
	})
	.text(function (d) {
		return d.battletag;
	})
	.attr("font-family", "sans-serif")
   .attr("font-size", "11px")
   .attr("fill", "blue")
   .attr("text-anchor", "middle");
});

svg.selectAll("rect")
   .on("mouseout", function(d) {
   		svg.selectAll("text").remove("text");


   });



d3.select("#ten").on("click",function() {
	currentArray = allData.slice(0,10);
	d3.selectAll('.enter').attr("class", "exit").style('opacity' , 0);
	svg.selectAll("rect").data(currentArray).transition()
	.attr("x" , function(d,i) {
		return i * (width/currentArray.length); })
	.attr("y" , function(d) { 
		return height-d.stats.damage/10000;})
	.attr("width", width / currentArray.length - barPadding)
	.attr("height", function(d) {
		return d.stats.damage/10000;
	})
	.attr("class" , "enter")
	.style("opacity" , 1);
	;


	// svg.selectAll("text").data(dpsArray.slice(0,10)).enter().append("text")
	// .attr("x" , function(d, i) {
	// 	return i * (width / dpsArray.slice(0,10).length) + (width / dpsArray.slice(0,10).length - barPadding) /2;
	// })
	// .attr("y" , function(d) {
	// 	return (height)-(d/10000);
	// })
	// .text(function (d) {
	// 	return (d/1000000).toFixed(2)+"m";
	// })
	// .attr("font-family", "sans-serif")
 //   .attr("font-size", "11px")
 //   .attr("fill", "red")
 //   .attr("text-anchor", "middle");


});

d3.select("#twenty").on("click",function() {

	currentArray = allData.slice(0,20);
	d3.selectAll('.enter').attr("class", "exit").style('opacity' , 0);

	svg.selectAll("rect").data(currentArray).transition()
	.attr("x" , function(d,i) {
		return i * (width/currentArray.length); })
	.attr("y" , function(d) { 
		return height-d.stats.damage/10000;})
	.attr("width", width / currentArray.length - barPadding)
	.attr("height", function(d) {
		return d.stats.damage/10000;
	})
	.attr("class" , "enter")
	.style("opacity" , 1);
	;
});

d3.select("#fifty").on("click",function() {

	currentArray = allData.slice(0,50);
	d3.selectAll('.enter').attr("class", "exit").style('opacity' , 0);

	svg.selectAll("rect").data(currentArray).transition()
	.attr("x" , function(d,i) {
		return i * (width/currentArray.length); })
	.attr("y" , function(d) { 
		return height-d.stats.damage/10000;})
	.attr("width", width / currentArray.length - barPadding)
	.attr("height", function(d) {
		return d.stats.damage/10000;
	})
	.attr("class" , "enter")
	.style("opacity" , 1);
	;
});

d3.select("#hundred").on("click",function() {
	currentArray = allData.slice(0,100);
	d3.selectAll('.enter').attr("class", "exit").style('opacity' , 0);

	svg.selectAll("rect").data(currentArray).transition()
	.attr("x" , function(d,i) {
		return i * (width/currentArray.length); })
	.attr("y" , function(d) { 
		return height-d.stats.damage/10000;})
	.attr("width", width / currentArray.length - barPadding)
	.attr("height", function(d) {
		return d.stats.damage/10000;
	})
	.attr("class" , "enter")
	.style("opacity" , 1);
	;
});


</script>

//List of all the BattleTags for the corresponding Leaderboard
<ol>
<% ejs_battletags.forEach(function (tag) { %>

	<li><a href = "/player/<%= tag.Battletag.replace("#","-") %>" >  <%= tag.Battletag %></a></li>
<!-- //if using requestURL.
// 	<li><a href = "/player/<%= tag %>" >  <%= tag %></a></li>
-->

<% }) %>
</ol>
</body>