<!DOCTYPE html>
<html lang="en">
<head>
	<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
	<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
	<meta charset="UTF-8">
	<title><%- region %> <%- leaderboardType %> <%- title %> Leaderboard page</title>
	<link rel="stylesheet" type="text/css" href="../../../styles/leaderboard.css">
</head>


<body>
<h1>This is the <%- region %> <%- leaderboardType %> <%- title %> Leaderboard page</h1>
<nav>
	<span id='ten'> 10 values </span>
	<span id='twenty'> 20 values </span>
	<span id='fifty'> 50 values </span>
	<span id='hundred'> 100 values </span>
</nav>
<br />
<p><a href="/update/<%- region %>/<%- leaderboardType %>/<%- title %>">update leaderboard</a>
<div id='visual'></div>
<script>
var allData = <%-JSON.stringify(all)%>;
var currentArray = allData.slice(0,100);
var currentDataset = "DPS";
var currentTop = 100;

var height = 300, width = 800;
var barPadding = 1;
var xPadding = 60;
var yPadding = 25;
var svg= d3.select("#visual")
	.append("svg")
	.attr("height", height)
	.attr("width" , width);

var tip = d3.tip().attr('class', 'd3-tip').html(function(d,i) {
	return (i+1)+"."+"<span class=\"btag\">"+d.battletag+"</span><br />DPS:<span class=\"damage\">"+d.stats.damage+"</span>";
});
svg.call(tip);

var legend = svg.selectAll(".legend")
				.data([10,20,50,100])
				.enter()
				.append("g")
				.attr("class", "legend")
     			.attr("transform", function(d, i) { 
     				return "translate("+(i*40)+",0)"; 
     			});

legend.append("text")
		.attr("x", 10)
		.attr("y", 13)
		.style("attr","black")
		.text(function(d) {
			return "Top " +d;
		})
		.on("click" , function(d) {
			createGraph(d);
		});

function createGraph(number) {
	//if number == null, set to currentTop
	currentTop = 100;
	currentArray = allData.slice(0,number);
	d3.selectAll('.enter').attr("class", "exit").remove();

	var xScale = d3.scale.linear()
					.domain([0, currentArray.length])
					.range([xPadding, width-xPadding]);
	var yScale = d3.scale.linear()
					.domain([0, d3.max(currentArray, function(d) { 
						if (d == null || d == 0) {
							return 0;
						}
						else {
							if (currentDataset == "DPS") {
								return d.stats.damage;
							}
							if (currentDataset == "toughness") {
								return d.stats.toughness;
							}
						}
					})])
					.range([height-yPadding, yPadding]);

	var xAxis = d3.svg.axis()
					.scale(xScale)
					.orient("bottom")
					.ticks(5);
	var yAxis = d3.svg.axis()
					.scale(yScale)
					.orient("left")
					.ticks(5);

	//add bars and links
	svg.selectAll("rect").data(currentArray).enter()
		.append("a").attr('xlink:href', function(d,i) {
			return "<%- title %>#"+(i+1);
		}).append("rect")
			.attr("x" , function(d,i) {
				return xScale(i); })
			.attr("y" , function(d) { 
				if (d == null || d == 0) {
					return 0;
				}
				else {
					if (currentDataset == "DPS") {
						return yScale(d.stats.damage);
					}
					if (currentDataset == "toughness") {
						return yScale(d.stats.toughness);
					}
				}
			})
			//width of one bar is (widthOfGraph / # of datapoints) - spaceInBetweenBars
			.attr("width", (width-(2*xPadding)) / currentArray.length - barPadding)
			.attr("height", function(d) {
				if (d == null || d == 0) {
					return 0;
				}
				else {
					if (currentDataset == "DPS") {
						return height-yScale(d.stats.damage)-yPadding;
					}
					if (currentDataset == "toughness") {
						return height - yScale(d.stats.toughness)-yPadding;
					}
				}	
			})
			.attr("class" , "enter")
			.on('mouseover', tip.show)
			.on('mouseout', tip.hide);
	//add xAxis
	svg.append("g")
		.attr("class", "enter axis")
		.attr("transform", "translate(0," + (height-yPadding) + ")")
		.call(xAxis);
	//add yAxis
	svg.append("g")
		.attr("class", "enter axis")
		.attr("transform", "translate("+xPadding+", 0)")
		.call(yAxis);
}

createGraph(100);

d3.select("#hundred").on("click",function() {
	currentDataset = "toughness";
	currentArray = allData.slice(0,100);
	d3.selectAll('.enter').attr("class", "exit").style('opacity' , 0);

	svg.selectAll("rect").data(currentArray).transition()
	.attr("x" , function(d,i) {
		return i * (width/currentArray.length); })
	.attr("y" , function(d) { 
		if (d == null || d == 0) {
			return 0;
		}
		else {
			return height-d.stats.damage/10000;
		}
	})
	.attr("width", width / currentArray.length - barPadding)
	.attr("height", function(d) {
		if (d == null || d == 0) {
			return 0;
		}
		else {
			return d.stats.damage/10000;
		}	
	})
	.attr("class" , "enter")
	.style("opacity" , 1);
	;
});
</script>

<!-- List of all the BattleTags for the corresponding Leaderboard -->
<table>
	<tr>
		<th>Standing</th>
		<th>Battletag</th>
		<th>Greater Rift</th>
		<th>Time Spent</th>
		<th>Date Completed</th>
	</tr>
	<% ejs_battletags.slice(0,100).forEach(function (tag) { %>
		
		<tr id="<%= tag.Standing %>">
			<td><%= tag.Standing %></td>
			<td><a href = "/player/<%= tag.Battletag.replace("#","-") %>" ><%= tag.Battletag %></a></td>
			<td><%= tag["Greater Rift"] %></td>
			<td><%= tag["Time Spent"] %></td>
			<td><%= tag["Date Completed"] %></td>
		</tr>

	<% }) %>
</table>
</body>